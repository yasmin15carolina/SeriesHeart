/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package forms;

import classes.Database;
import classes.FavoritesSeries;
import com.mysql.jdbc.Blob;
import java.awt.Image;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 *
 * @author yasmi
 */
public class ChooseSeries extends javax.swing.JPanel {

    /**
     * Creates new form ChooseSeries
     */
    public ChooseSeries(int user) {
        initComponents();
        /* try {
            getDBGenres();
        } catch (SQLException ex) {
            Logger.getLogger(ChooseSeries.class.getName()).log(Level.SEVERE, null, ex);
        }*/
        userId = user;
    }

    public ChooseSeries() {
        initComponents();
        /*try {
            getDBGenres();
        } catch (SQLException ex) {
            Logger.getLogger(ChooseSeries.class.getName()).log(Level.SEVERE, null, ex);
        }
        pack();*/

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        genreBox = new javax.swing.JComboBox<>();
        picture = new javax.swing.JLabel();
        seriesPremiere = new javax.swing.JLabel();
        seriesTitle = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        seriesGenre = new javax.swing.JLabel();
        btnPrevious = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        seriesDesc = new javax.swing.JTextPane();
        btnFavorite = new javax.swing.JButton();
        btnUnFavorite = new javax.swing.JButton();

        jLabel1.setText("Gênero preferido:");

        genreBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genreBoxActionPerformed(evt);
            }
        });

        picture.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        seriesPremiere.setText("Estreia");

        seriesTitle.setText("titulo da serie ");

        txtSearch.setText("Buscar por título");
        txtSearch.setToolTipText("");

        btnSearch.setText("ok");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        seriesGenre.setText("genero");

        btnPrevious.setText("« Anterior");
        btnPrevious.setEnabled(false);
        btnPrevious.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPreviousActionPerformed(evt);
            }
        });

        btnNext.setText("Próximo »");
        btnNext.setEnabled(false);
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });

        seriesDesc.setEditable(false);
        jScrollPane1.setViewportView(seriesDesc);

        btnFavorite.setText("♥  Favoritar ");
        btnFavorite.setEnabled(false);
        btnFavorite.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFavoriteActionPerformed(evt);
            }
        });

        btnUnFavorite.setText("♥  Desfavoritar ");
        btnUnFavorite.setEnabled(false);
        btnUnFavorite.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUnFavoriteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(genreBox, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtSearch)
                        .addGap(18, 18, 18)
                        .addComponent(btnSearch))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(picture, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(seriesTitle)
                                    .addComponent(seriesGenre)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnPrevious)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnNext))
                                    .addComponent(seriesPremiere)))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 457, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnFavorite, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnUnFavorite)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(genreBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(picture, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(seriesTitle)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(seriesPremiere)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(seriesGenre)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnNext)
                            .addComponent(btnPrevious))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUnFavorite)
                    .addComponent(btnFavorite))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnPreviousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPreviousActionPerformed
        try {
            btnFavorite.setEnabled(true);
            btnUnFavorite.setEnabled(false);
            search.previous();
            seriesTitle.setText(search.getString("title"));
            seriesPremiere.setText("Estreia: " + year.format(search.getDate("premiere")));
            seriesGenre.setText(search.getString(("genre")));
            seriesDesc.setText(search.getString("descri"));

            InputStream pic = search.getBinaryStream("picture");
            picture.setIcon(ResizeImage(pic));

            if (search.isFirst()) {
                btnPrevious.setEnabled(false);
            }
            btnNext.setEnabled(true);

            ifSerieIsFavorite();

        } catch (SQLException ex) {
            Logger.getLogger(ChooseSeries.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ChooseSeries.class.getName()).log(Level.SEVERE, null, ex);
        }        // TODO add your handling code here:
    }//GEN-LAST:event_btnPreviousActionPerformed

    private void genreBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genreBoxActionPerformed
        if (genreBox.getSelectedIndex() > -1) {
            Research("SELECT * FROM serie WHERE genre='" + genreBox.getSelectedItem().toString() + "' ORDER BY title ASC");
        }
    }//GEN-LAST:event_genreBoxActionPerformed

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        try {
            btnFavorite.setEnabled(true);
            btnUnFavorite.setEnabled(false);
            search.next();

            seriesTitle.setText(search.getString("title"));
            seriesPremiere.setText("Estreia: " + year.format(search.getDate("premiere")));
            seriesGenre.setText(search.getString(("genre")));
            seriesDesc.setText(search.getString("descri"));

            InputStream pic = search.getBinaryStream("picture");
            picture.setIcon(ResizeImage(pic));

            if (search.isLast()) {
                btnNext.setEnabled(false);
            }
            btnPrevious.setEnabled(true);

            ifSerieIsFavorite();
        } catch (SQLException ex) {
            Logger.getLogger(ChooseSeries.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ChooseSeries.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_btnNextActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        if (txtSearch.getText() == "") {
            Research("SELECT * FROM serie ORDER BY title ASC");
        } else {
            Research("SELECT * FROM serie WHERE title LIKE '%" + txtSearch.getText() + "%' ORDER BY title ASC");
        }

    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnFavoriteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFavoriteActionPerformed
        FavoritesSeries fav = null;
        int index = 0;
        if (!IsListReady() && favSeries.size() == 5) {
            index = EmptyPlace();
            fav = (FavoritesSeries) favSeries.get(index);
            try {
                fav.serieId = search.getInt("id");
            } catch (SQLException ex) {
                Logger.getLogger(ChooseSeries.class.getName()).log(Level.SEVERE, null, ex);
            }
            favSeries.remove(index);
            favSeries.add(fav);

        } else try {
            favSeries.add(new FavoritesSeries(0, userId, search.getInt("id")));
        } catch (SQLException ex) {
            Logger.getLogger(ChooseSeries.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            ifSerieIsFavorite();
        } catch (SQLException ex) {
            Logger.getLogger(ChooseSeries.class.getName()).log(Level.SEVERE, null, ex);
        }

        /*favSeries.add(new FavoritesSeries(0,userId,search.getInt("id")));
            if(favSeries.size() == 5){
                btnFavorite.setEnabled(false);
            }*/
        printa();
    }//GEN-LAST:event_btnFavoriteActionPerformed

    private void btnUnFavoriteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUnFavoriteActionPerformed
        FavoritesSeries removed = null;
        int index = 0;
        for (int i = 0; i < favSeries.size(); i++) {
            FavoritesSeries fs = (FavoritesSeries) favSeries.get(i);
            try {
                if (fs.serieId == search.getInt("id")) {
                    btnFavorite.setEnabled(false);
                    index = i;
                    removed = fs;
                }
            } catch (SQLException ex) {
                Logger.getLogger(ChooseSeries.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        favSeries.remove(index);
        removed.serieId = 0;
        favSeries.add(removed);

        printa();
        btnFavorite.setEnabled(true);
        btnUnFavorite.setEnabled(false);
    }//GEN-LAST:event_btnUnFavoriteActionPerformed

    public void ChangeFavorites() {
        boolean ready = true;
        for (int i = 0; i < favSeries.size(); i++) {
            FavoritesSeries fs = (FavoritesSeries) favSeries.get(i);
            if (fs.serieId == 0) {
                ready = false;
            }
        }
        if (ready) {
            for (int i = 0; i < favSeries.size(); i++) {
                FavoritesSeries fs = (FavoritesSeries) favSeries.get(i);
                try {
                    db.Update("UPDATE favorites set userId = " + fs.userId + ",serieId = " + fs.serieId
                            + " WHERE id=" + fs.id);
                    //db.insert("INSERT INTO favorites(userId,serieId) VALUES('"+fs.userId+",'"+fs.serieId+"')");
                } catch (SQLException ex) {
                    Logger.getLogger(ChooseSeries.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            JOptionPane.showMessageDialog(null, "Séries atualizadas");
        } else {
            JOptionPane.showMessageDialog(null, "Você precisa selecionar 5 Séries");
        }
    }

    //cria a relação das series favoritas do usuario no primeiro uso
    public boolean DefineFavorites() {
        boolean ready = true;
        for (int i = 0; i < favSeries.size(); i++) {
            FavoritesSeries fs = (FavoritesSeries) favSeries.get(i);
            if (fs.serieId == 0) {
                ready = false;
            }
        }
        if (ready && favSeries.size() == 5) {
            for (int i = 0; i < favSeries.size(); i++) {
                FavoritesSeries fs = (FavoritesSeries) favSeries.get(i);
                try {
                    db.insert("INSERT INTO favorites(userId,serieId) VALUES('" + fs.userId + "','" + fs.serieId + "')");
                } catch (SQLException ex) {
                    Logger.getLogger(ChooseSeries.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            return true;
        } else {
            JOptionPane.showMessageDialog(null, "Você precisa selecionar 5 Séries");
            return false;
        }
    }

    //retorna o lugar da lista em que foi desfavoritada uma série
    public int EmptyPlace() {
        int empty = 0;
        for (int i = 0; i < favSeries.size(); i++) {
            FavoritesSeries fs = (FavoritesSeries) favSeries.get(i);
            if (fs.serieId == 0) {
                empty = i;
            }
        }
        return empty;
    }

    //verifica se a serie ja faz parte das favoritas do usuario
    public void ifSerieIsFavorite() throws SQLException {
        for (int i = 0; i < favSeries.size(); i++) {
            FavoritesSeries fs = (FavoritesSeries) favSeries.get(i);
            if (fs.serieId == search.getInt("id")) {
                btnFavorite.setEnabled(false);
                btnUnFavorite.setEnabled(true);
            }
        }

        if (IsListReady()) {
            btnFavorite.setEnabled(false);
        }

    }

    //verifica se todas as series na lista estao definidas
    public boolean IsListReady() {
        boolean b = true;
        for (int i = 0; i < favSeries.size(); i++) {
            FavoritesSeries fs = (FavoritesSeries) favSeries.get(i);
            if (fs.serieId == 0) {
                b = false;
            }
        }
        if (favSeries.size() < 5) {
            return false;
        } else {
            return b;
        }
    }

    //recebe as series favoritas do usuario
    public void receiveFavorites() throws SQLException {
        favSeries = new ArrayList<FavoritesSeries>();
        ResultSet series = db.Select("SELECT * FROM favorites WHERE userId=" + userId);
        while (series.next()) {
            favSeries.add(new FavoritesSeries(series.getInt("id"), userId, series.getInt("serieId")));
        }

    }

    public void Research(String sql) {
        try {
            search = db.Select(sql);
            if (search.next()) {
                search.first();
                seriesTitle.setText(search.getString("title"));
                seriesPremiere.setText("Estreia: " + year.format(search.getDate("premiere")));
                seriesGenre.setText(search.getString(("genre")));
                seriesDesc.setText(search.getString("descri"));

                InputStream pic = search.getBinaryStream("picture");
                picture.setIcon(ResizeImage(pic));

                btnPrevious.setEnabled(false);
                btnFavorite.setEnabled(true);
                if (search.isLast()) {
                    btnNext.setEnabled(false);
                } else {
                    btnNext.setEnabled(true);
                }

                ifSerieIsFavorite();
            } else {
                /*btnNext.setEnabled(false);
                btnPrevious.setEnabled(false);
                btnFavorite.setEnabled(false);*/
                JOptionPane.showMessageDialog(null, "Sem Resultados");
                seriesTitle.setText("");
                seriesPremiere.setText("");
                seriesGenre.setText("");
                seriesDesc.setText("");

                picture.setIcon(null);
                genreBox.setSelectedIndex(-1);

                btnNext.setEnabled(false);
                btnPrevious.setEnabled(false);
                btnFavorite.setEnabled(false);
            }

        } catch (SQLException ex) {
            Logger.getLogger(ChooseSeries.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ChooseSeries.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    //formata a imagem do banco de dados para a label
    public ImageIcon ResizeImage(InputStream pic) throws IOException {
        Image img = ImageIO.read(pic);
        img = img.getScaledInstance(picture.getWidth(), picture.getHeight(), Image.SCALE_SMOOTH);
        ImageIcon imgcon = new ImageIcon(img);
        picture.setIcon(imgcon);

        return imgcon;
    }

    public void printa() {
        for (int i = 0; i < favSeries.size(); i++) {
            FavoritesSeries fs = (FavoritesSeries) favSeries.get(i);
            System.out.println("id: " + fs.id + " user: " + fs.userId + " serie: " + fs.serieId);
        }
        System.out.println("SELECT * FROM favorites WHERE userId=" + userId + " size: " + favSeries.size());
    }

    public void getDBGenres() throws SQLException {
        try {
            ResultSet genres = db.Select("SELECT DISTINCT genre FROM serie ORDER BY genre ASC");
            //genreBox.removeAllItems();
            //List genresList = new ArrayList<String>();
            while (genres.next()) {
                String g = genres.getString("genre");
                genreBox.addItem(g);
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
            System.out.println(e);
        }
    }

    List favSeries = new ArrayList<FavoritesSeries>();
    ResultSet search = null;
    SimpleDateFormat year = new SimpleDateFormat("yyyy");
    Database db = new Database();
    int userId;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnFavorite;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPrevious;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUnFavorite;
    private javax.swing.JComboBox<String> genreBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel picture;
    private javax.swing.JTextPane seriesDesc;
    private javax.swing.JLabel seriesGenre;
    private javax.swing.JLabel seriesPremiere;
    private javax.swing.JLabel seriesTitle;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
